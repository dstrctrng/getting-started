#!/bin/bash

#/ NAME
#/     build -- builds pancake
#/           -- builds static site using jekyll
#/
#/ SYNOPSIS
#/     build pancake
#/     build site

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component(s)"
    exit 1
  fi

  local nm_component="$1"; shift
  case "$nm_component" in 
    pancake)
      build_pancake "$@"
      ;;
    site)
      build_jekyll "$@"
      ;;
    *)
      logger_fatal "don't know how to build ${nm_component}"
      exit 1
      ;;
  esac
}

function build_pancake {
  ln -nfs ../vault $shome/.macports/
  ln -nfs ../vault $shome/.ubuntu/

  source $shome/.macports/.profile
  source $shome/.ubuntu/.profile

  cd $shome/.macports
  ln -nfs vault/macports/software_zendesk software
  bin/setup macports
  bin/build macports
  bin/build ports
  bin/build ruby


  cd $shome/.ubuntu
  bin/bundler
  bundle exec vagrant box add destructuring boxes/destructuring.box || true # TODO
  bin/instance --ip 192.168.88.101 dev1 destructuring
  bin/instance --ip 192.168.88.102 dev2 destructuring
  bin/instance --ip 192.168.88.103 dev3 destructuring
  bin/instance --ip 192.168.88.104 dev4 destructuring
  bin/instance --ip 192.168.88.105 dev5 destructuring
}

# build the site with jekyll
function build_jekyll {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd $shome/site
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
