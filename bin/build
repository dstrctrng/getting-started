#!/bin/bash

#/ NAME
#/     build -- builds pancake components
#/           -- builds static site using jekyll
#/
#/ SYNOPSIS
#/     build macports|ubuntu|ruby|cue|rbenv|junas|hubflow
#/     build site

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component(s)"
    exit 1
  fi

  local nm_component="$1"; shift
  case "$nm_component" in 
    macports)
      build_${nm_component}
      ;;
    ubuntu)
      build_${nm_component}
      ;;
    ruby)
      build_${nm_component}
      ;;
     rbenv)
      build_${nm_component}
      ;;
    junas)
      build_${nm_component}
      ;;
    hubflow)
      build_${nm_component}
      ;;
    cue)
      build_${nm_component}
      ;;
    xmonad)
      build_${nm_component}
      ;;
    site)
      build_jekyll "$@"
      ;;
    *)
      logger_fatal "don't know how to build ${nm_component}"
      exit 1
      ;;
  esac
}

function build_macports {
  ln -nfs ../vault $shome/.macports/

  cd $shome/.macports
  bin/setup macports
  bin/build macports
  bin/build ports
}

function build_ubuntu {
  ln -nfs ../vault $shome/.ubuntu/

  cd $shome/.ubuntu
  bundle exec vagrant box add destructuring boxes/destructuring.box || true # TODO
  bin/instance --ip 192.168.88.101 dev1 destructuring
}

function build_ruby {
  export CFLAGS="-O2 -arch x86_64"
  export LDFLAGS="-L$MACPORTS_ROOT/local/lib"
  export CPPFLAGS="-I$MACPORTS_ROOT/local/include"
  
  if [[ "$FLAGS_clean" == "$FLAGS_TRUE" ]]; then
    if [[ -d "$HOME/.rvm" ]]; then
      mv "$HOME/.rvm" "$HOME/.rvm.old"
    fi
  fi
  
  $shome/bin/rvm-install 1.11.7
  
  if [[ "$FLAGS_update" == "$FLAGS_TRUE" ]]; then
    install_cmd="reinstall"
  else
    install_cmd="install"
  fi

  $shome/bin/rvm-run rvm $install_cmd ree --with-openssl-dir=$MACPORTS_ROOT/local
  $shome/bin/rvm-run rvm $install_cmd jruby

  export CC="$MACPORTS_ROOT/local/bin/gcc"
  $shome/bin/rvm-run rvm $install_cmd 1.9.3 --with-opt-dir=$MACPORTS_ROOT/local
  unset CC

  $shome/bin/rvm-run rvm ree --default
}

function build_rbenv {
  git clone https://github.com/HeSYINUvSBZfxqA/rbenv .rbenv
  logger_info "to activate cue, source .rbenv/.profile, after rvm if used"
}

function build_junas {
  git clone https://github.com/HeSYINUvSBZfxqA/junas .junas
  logger_info "to activate junas, symlink .vim to .junas, copy .junas/vimrc.example to .vimrc"
}

function build_hubflow {
  git clone https://github.com/HeSYINUvSBZfxqA/hubflow .hubflow
  logger_info "to activate cue, source .hubflow/.profile"
}

function build_cue {
  git clone https://github.com/HeSYINUvSBZfxqA/cue .cue
  logger_info "to activate cue, source .cue/.profile"
}

function build_xmonad {
  defaults write org.macports.X11 enable_test_extensions -boolean true 

  if [[ "$FLAGS_clean" == "$FLAGS_TRUE" ]]; then
    rm -rf ~/.cabal ~/.ghc
  fi

  if [[ "$FLAGS_update" == "$FLAGS_TRUE" ]]; then
    cabal update
  fi

  cabal install xmonad-0.9.1
  cabal install xmonad-contrib-0.9.1 --flags="-use_xft"
  cabal install xmobar-0.13

  ~/.cabal/bin/xmonad --recompile
}

# build the site with jekyll
function build_jekyll {
  export BUNDLE_GEMFILE="$shome/.doc/Gemfile"

  cd $shome/site
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
  bundle exec jekyll
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
