#!/bin/bash

#/ NAME
#/     pancake -- text ui for pancake
#/
#/ SYNOPSIS
#/     pancake shell
#/     pancake user XXX
#/     pancake setup|build
#/     pancake update

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    echo "missing pancake subcommand"
    exit 1
  fi

  local nm_component="$1"; shift

  case "$nm_component" in
    init)
      cat <<EOF
      pushd ~ > /dev/null;

      if [[ -f /opt/.profile ]];     then source /opt/.profile; fi;
      if [[ -d .rvm ]];              then source .rvm/scripts/rvm; rvm default; fi;
      if [[ -f .rbenv/.profile ]];   then source .rbenv/.profile; fi
      if [[ -f .hubflow/.profile ]]; then source .hubflow/.profile; fi;
      if [[ -f .cue/.profile ]];     then source .cue/.profile; fi
      if [[ -f .ubuntu/.profile ]];  then source .ubuntu/.profile; fi

      popd > /dev/null;
EOF
      echo "PATH=$shome/bootstrap:"'$PATH'
      ;;
    shell)
      local tmp_init="$(mktemp -t XXXXXXXXX)"
      $shome/bin/pancake init > "$tmp_init"
      export _TMP_INIT="$tmp_init"
      exec bash --init-file "$shome/bootstrap/_init" -i
      ;;
    dev?)
      sudo su - vagrant -c "source .bash_profile; v $nm_component $@"
      ;;
    update)
      cd "$shome"
      git pull origin update
      git submodule update --init --recursive
      ;;
    user)
      case "$1" in
        zendesk)
          $shome/bin/pancake -- setup -m -u 502 user zendesk
          ;;
        vagrant)
          $shome/bin/pancake -- setup -U -u 503 user vagrant
          ;;
        buddhy)
          $shome/bin/pancake -- setup -u 504 user buddhy
          ;;
        zenguest)
          $shome/bin/pancake -- setup -r '' -u 505 user zenguest
          ;;
        *)
          false
          ;;
        esac
      ;;
    *)
      $shome/bin/$nm_component "$@"
      ;;
  esac
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
