#!/bin/bash

#/ NAME
#/     pancake -- text ui for pancake
#/
#/ SYNOPSIS
#/     pancake shell
#/     pancake update
#/     pancake dev1|dev2|dev3|dev4
#/     pancake user pancake|vagrant
#/     pancake init

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    echo "missing pancake subcommand"
    exit 1
  fi

  local nm_component="$1"; shift

  case "$nm_component" in
    init)
      cat "$shome/config/bash.example"
      echo "eval "'"$'"($shome/bin/agent init)"'"'
      echo "PATH=$shome/bootstrap:"'$PATH'
      ;;
    shell)
      local tmp_init="$(mktemp -t XXXXXXXXX)"
      $shome/bin/pancake init > "$tmp_init"
      export _TMP_INIT="$tmp_init"
      exec bash --init-file "$shome/bootstrap/_init" -i
      ;;
    dev?)
      if [[ -d "$HOME/.ubuntu/vagrant/$nm_component" ]]; then
        $HOME/.ubuntu/bin/vagrant -- "$nm_component" "$@"
      else
        sudo su - vagrant -c "source .bash_profile; v $nm_component $@"
      fi
      ;;
    update)
      cd "$shome"
      git pull
      git submodule update --init --recursive
      ;;
    user)
      case "$1" in
        pancake)
          $shome/bin/setup -u 502 -m user pancake
          ;;
        vagrant)
          $shome/bin/setup -u 503 -U -b vagrant user vagrant
          ;;
        *)
          false
          ;;
        esac
      ;;
    *)
      $shome/bin/$nm_component "$@"
      ;;
  esac
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
